package it.polito.dp2.NFFG.sol3.service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.ws.rs.ProcessingException;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.Entity;
import javax.ws.rs.client.WebTarget;

import it.polito.dp2.NFFG.sol3.service.jaxb.Nffg;
import it.polito.dp2.NFFG.sol3.service.neo4j.Node;
import it.polito.dp2.NFFG.sol3.service.neo4j.ObjectFactory;
import it.polito.dp2.NFFG.LinkReader;
import it.polito.dp2.NFFG.NodeReader;
import it.polito.dp2.NFFG.sol3.service.jaxb.LinkType;

import it.polito.dp2.NFFG.sol3.service.jaxb.NodeType;
import it.polito.dp2.NFFG.sol3.service.jaxb.Policy;
import it.polito.dp2.NFFG.sol3.service.jaxb.ReachabilityPolicyType;
import it.polito.dp2.NFFG.sol3.service.jaxb.TraversalPolicyType;

import it.polito.dp2.NFFG.sol3.service.neo4j.Labels;
import it.polito.dp2.NFFG.sol3.service.neo4j.Node;
import it.polito.dp2.NFFG.sol3.service.neo4j.ObjectFactory;
import it.polito.dp2.NFFG.sol3.service.neo4j.Path;
import it.polito.dp2.NFFG.sol3.service.neo4j.Paths;
import it.polito.dp2.NFFG.sol3.service.neo4j.Property;
import it.polito.dp2.NFFG.sol3.service.neo4j.Relationship;

import javax.ws.rs.core.GenericType;
import javax.ws.rs.core.Link;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.UriBuilder;

public class NffgServiceImp { // from negotiation class

	Map<String, Nffg> nffgMap = NffgDB.getMap();

	public void postSingleNffg(Nffg nffg) throws Exception {

		HashMap<String, String> nodeMap = new HashMap<String, String>();
		HashMap<String, String> linkMap = new HashMap<String, String>();

		// check if Nffg already existed or No
		if (NffgDB.getMap().containsKey(nffg.getNffgName())) {
			System.out.println("This Nffg Already Existed");
			throw new Exception("Nffg already Existed");
		}

		try {
			WebTarget target = createTarget();

			NFFG nffg = new ObjectFactory().createNode();//???
			Property nodeProperty = new ObjectFactory().createProperty();

			nffgProperty.setName("name");
			nffgProperty.setValue(nffg.getName());
			nffg.getProperty().add(nffgProperty);

			Node request = target.path("resource/node/").request(MediaType.APPLICATION_XML)
					.post(Entity.entity(node, MediaType.APPLICATION_XML), Node.class);

			nodeMap.put(nffg.getNffgName(), request.getId());

		} catch (Exception e) {
			throw e;
		}
	}
	
	// Getting the nodes
			Set<NodeReader> node_set = nffg.getNodes();
			for (NodeReader node_r : node_set) {
				Node node = objFact.createNode();
				Property nodeProperty = objFact.createProperty();
				nodeProperty.setName("name");
				nodeProperty.setValue(node_r.getName());
				node.getProperty().add(nodeProperty);

				try {
					Node request = target.path("resource/node/").request(MediaType.APPLICATION_XML)
							.post(Entity.entity(node, MediaType.APPLICATION_XML), Node.class);

					hm.put(node_r.getName(), request.id); // put name and id of node
															// into the HashMap
				} catch (ProcessingException pe) {
					System.out.println("Error during JAX-RS request processing");
					pe.printStackTrace();
				} catch (WebApplicationException wae) {
					System.out.println("Server returned error");
					wae.printStackTrace();
				} catch (Exception e) {
					System.out.println("Unexpected exception");
					e.printStackTrace();
				}
			}

			// Getting the links
			for (NodeReader node_r : node_set) {
				Set<LinkReader> link_set = node_r.getLinks();

				for (LinkReader link_r : link_set) {
					Relationship link = objFact.createRelationship();
					link.setDstNode(hm.get(link_r.getDestinationNode().getName()));
					link.setType("Link");

					try {
						Relationship linkReq = target
								.path("resource/node/" + hm.get(link_r.getSourceNode().getName()) + "/relationship")
								.request(MediaType.APPLICATION_XML)
								.post(Entity.entity(link, MediaType.APPLICATION_XML), Relationship.class);
					} catch (ProcessingException pe) {
						System.out.println("Error during JAX-RS request processing");
						pe.printStackTrace();
					} catch (WebApplicationException wae) {
						System.out.println("Server returned error");
						wae.printStackTrace();
					} catch (Exception e) {
						System.out.println("Unexpected exception");
						e.printStackTrace();
					}

				}
			}
	


	public Nffg createNffg(Nffg neg) {
		nffgMap.put(neg.getNffgName(), neg);

		return neg;
	}

	public void addPolicy(Policy policy_to_add) {

	}

	public void updatePolicy(Policy policy_to_update) {

	}

	public void deletePolicy(String policyName) {

	}

	private WebTarget createTarget() {
		WebTarget target;
		String property_value = System.getProperty("it.polito.dp2.NFFG.lab3.NEO4JURL");

		Client c = ClientBuilder.newClient();
		if (property_value == null)
			property_value = "http://localhost:8080/Neo4JXML/rest";
		target = c.target(property_value);
		return target;
	}

	public List<Nffg> getListOfNffgs() {
		// TODO Auto-generated method stub
		return null;
	}

	public Nffg getSingleNffg(String nffgId) {
		// TODO Auto-generated method stub
		return null;
	}

	public List<Policy> getListOfPolicies() {
		// TODO Auto-generated method stub
		return null;
	}

	public Policy getSinglePolicy(String policyId) {
		// TODO Auto-generated method stub
		return null;
	}

	public void postSinglePolicy(Policy policy) {
		// TODO Auto-generated method stub

	}

	public void deleteSinglePolicy(String policyId) {
		// TODO Auto-generated method stub

	}

}