<?xml version="1.0" encoding="UTF-8"?>

<project basedir="." default="generate-class-of-artifacts" name="sol_build">
	<description>
		Ant script for assignment3
		for the property we can have it
		or Not,since it's located in build that's first run and call
	</description>
	
	    <property name="root.location" location="." />
		<!-- The location to be used for class files -->
	    <property name="build.dir" location="${root.location}/build" />
		<!-- The location for source files -->
		<property name="src.dir" location="${lab3.location}/src" />
	
	
		<property name="src.dir" location="${root.location}/src" />
		<property name="path.prefix" value="it/polito/dp2/NFFG" />
		<property name="build.dir" location="${root.location}/build" />
		<property name="lib.dir" location="${root.location}/lib" />
		<property name="resources.dir" location="${root.location}/${serviceName}/WebContent" />
		<property name="web.lib.dir" location="${resources.dir}/WEB-INF/lib" />
		<property name="gen.dir" location="${root.location}/generated" />
		<property name="gen-tomcat-service.dir" location="${root.location}/target"/>
		<property name="gen-war.dir" location="${root.location}/war" />
		<property name="debug" value="true" />
		<property name="debuglevel" value="source,lines,vars" />
		<property name="target" value="1.8" />
		<property name="source" value="1.8" />
		<property name="schema.dir" location="${root.location}/xsd" />
		<property name="Wadl" value="${NEO4JURL}/application.wadl"/>
		<property name="NEO4JURL" value="http://localhost:${tomcatPort}/Neo4JXML/rest" />
		<property name="tomcatPort" value="8080"/>
	
	
	
	
	
	
	
	
	
	
	<target name="build-service"
		depends="generate-wadl,generated-schema,build-of-provided-class">
		<echo>Building NFFGInfo (if needed)...</echo>
		<javac destdir="${build.dir}" debug="${debug}" debuglevel="${debuglevel}"
			source="${src.dir}" target="${target}" includeantruntime="false">
			<src path="${service.src.dir}" />
			<classpath>
				<path refid="sol.classpath" />
			</classpath>
		</javac>
		<echo>Done.</echo>
	</target>
	<target name="build-client" depends="generated-schema,build-of-provided-class">
		<echo>Building NFFGInfo (if needed)...</echo>
		<javac destdir="${build.dir}" debug="${debug}" debuglevel="${debuglevel}"
			source="${src.dir}" target="${target}" includeantruntime="false">
			<src path="${client1.src.dir}" />
			<src path="${client2.src.dir}" />
			<classpath>
				<path refid="sol.classpath" />
			</classpath>
		</javac>
		<echo>Done.</echo>
	</target>

	<target name="build-of-provided-class">
		<echo>Building build-of-provided-class...</echo>
		<javac destdir="${build.dir}" debug="${debug}" debuglevel="${debuglevel}"
			source="${src.dir}" target="${target}" includeantruntime="false">
			<src path="${src.dir}" />
			<classpath>
				<path refid="sol.classpath" />
			</classpath>
		</javac>
		<echo>Done.</echo>
	</target>


	<!-- define wjc task (WADL to JAVA) -->
	<taskdef name="wjc" classname="org.jvnet.ws.wadl2java.WJCTask">
		<classpath>
			<fileset dir="${lib.dir}" includes="*.jar" />
		</classpath>
	</taskdef>

	<!-- define client artifact generation path -->
	<target name="generate-wadl">
		<mkdir dir="${gen.dir}" />
		<echo message="Compiling the descritption..." />
		<wjc target="${gen.dir}" autoSchemaPackage="false"
			package="it.polito.dp2.NFFG.sol2" description="${WADL}" />
	</target>

	<!-- Target chk-bindings -->
	<target name="-chk-bindings">
		<uptodate property="generate-bindings.notRequired"
			targetfile="${gen.dir}/.flagfile">
			<srcfiles dir="${schema.dir}" includes="**/*.xsd" />
		</uptodate>
	</target>

	<!-- Target generate-bindings-check riccardo sol -->
	<target name="generate-bindings" unless="generate-bindings.notRequired"
		depends="init,-chk-bindings" description="Generate bindings from schema">
		<exec executable="xjc" failonerror="true">
			<arg value="-d" />
			<arg value="${gen.dir}" />
			<arg value="-p" />
			<arg value="it.polito.dp2.NFFG.sol1.jaxb" />
			<arg value="${schema.dir}/nffgInfo.xsd" />
		</exec>
		<touch file="${gen.dir}/.flagfile" />
	</target>

</project>

