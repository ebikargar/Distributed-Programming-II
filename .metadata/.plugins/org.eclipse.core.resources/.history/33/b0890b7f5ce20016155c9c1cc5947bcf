package it.polito.dp2.NFFG.sol3.client2;

import java.util.Calendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.GenericType;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import it.polito.dp2.NFFG.LinkReader;
import it.polito.dp2.NFFG.NffgReader;
import it.polito.dp2.NFFG.NffgVerifier;
import it.polito.dp2.NFFG.NodeReader;
import it.polito.dp2.NFFG.PolicyReader;
import it.polito.dp2.NFFG.ReachabilityPolicyReader;
import it.polito.dp2.NFFG.TraversalPolicyReader;
import it.polito.dp2.NFFG.lab3.ServiceException;
import it.polito.dp2.NFFG.lab3.UnknownNameException;
import it.polito.dp2.NFFG.sol3.client2.MyLinkReader;
import it.polito.dp2.NFFG.sol3.client2.MyNffgReader;
import it.polito.dp2.NFFG.sol3.client2.MyNodeReader;
import it.polito.dp2.NFFG.sol3.client2.MyReachablilityPolicyReader;
import it.polito.dp2.NFFG.sol3.client2.MyTraversalPolicyReader;
import it.polito.dp2.NFFG.sol3.service.jaxb.LinkType;
import it.polito.dp2.NFFG.sol3.service.jaxb.LinksType;
import it.polito.dp2.NFFG.sol3.service.jaxb.Nffg;
import it.polito.dp2.NFFG.sol3.service.jaxb.NodeType;
import it.polito.dp2.NFFG.sol3.service.jaxb.NodesType;
import it.polito.dp2.NFFG.sol3.service.jaxb.ReachabilityPolicyType;
import it.polito.dp2.NFFG.sol3.service.jaxb.TraversalPolicyType;

public class MyNffgVerifier implements NffgVerifier {

	public MyNffgVerifier(String url_address) {

		WebTarget target;
		target = ClientBuilder.newClient().target(url_address);
		
		List<Nffg> getNffg = target.path("nffgService/").request(MediaType.APPLICATION_XML)
				.get(new GenericType<List<Nffg>>() {
				});

		if (getNffg.getStatus() == 404) {
			System.out.println("Not found policy to be updated ...");
			throw new UnknownNameException();
		}
		if (getpolicy.getStatus() != 200)
			throw new ServiceException();

		Response getpolicy = target.path("policiesService/" + name).request(MediaType.APPLICATION_XML).get();

		if (getpolicy.getStatus() == 404) {
			System.out.println("Not found policy to be updated ...");
			throw new UnknownNameException();
		}
		if (getpolicy.getStatus() != 200)
			throw new ServiceException();

		NffgVerifierType rootElement = (NffgVerifierType) rootObjValue;

		nffg_r_set = new HashSet<NffgReader>();
		for (NffgType nffg_t : rootElement.getNffg()) {

			HashMap<String, NodeReader> node_list = new HashMap<String, NodeReader>();
			HashMap<String, LinkReader> link_list = new HashMap<String, LinkReader>();

			NffgReader nffg_r = new MyNffgReader(nffg_t, node_list);
			nffg_r_set.add(nffg_r);

			NodesType node_set = nffg_t.getNodes();
			for (NodeType node_r : node_set.getNode()) {
				MyNodeReader myNodeReader = new MyNodeReader(node_r, link_list);
				node_list.put(node_r.getNodeName(), myNodeReader);
			}

			LinksType link_set = nffg_t.getLinks();
			for (LinkType link_r : link_set.getLink()) {
				MyLinkReader myLinkReader = new MyLinkReader(nffg_t, link_r, node_list.get(link_r.getSrcNode()),
						node_list.get(link_r.getDestNode()));
				link_list.put(link_r.getLinkName(), myLinkReader);
			}

			List<ReachabilityPolicyType> reachability_policy_set = nffg_t.getPolicies().getReachabilityPolicy();
			for (ReachabilityPolicyType reachability_policy_t : reachability_policy_set) {
				ReachabilityPolicyReader reachability_policy_r = new MyReachablilityPolicyReader(nffg_t,
						reachability_policy_t.getPolicyName(), reachability_policy_t.isIsPositive(),
						reachability_policy_t.getVerificationResult(),
						node_list.get(reachability_policy_t.getSrcNode()),
						node_list.get(reachability_policy_t.getDestNode()), nffg_r);
				policy_r_set.add(reachability_policy_r);
			}
			List<TraversalPolicyType> traversal_policy_set = nffg_t.getPolicies().getTraversalPolicy();
			for (TraversalPolicyType traversal_policy_t : traversal_policy_set) {
				TraversalPolicyReader traversal_policy_r = new MyTraversalPolicyReader(nffg_t, traversal_policy_t,
						node_list.get(traversal_policy_t.getSrcNode()), node_list.get(traversal_policy_t.getDestNode()),
						traversal_policy_t.getVerificationResult(), nffg_r);
				policy_r_set.add(traversal_policy_r);
			}

		}

	}

	@Override
	public NffgReader getNffg(String arg0) {
		for (NffgReader nffg_r : nffg_r_set) {
			if (nffg_r.equals(arg0)) {
				return nffg_r;
			}
		}
		return null;
	}

	@Override
	public Set<NffgReader> getNffgs() {
		if (nffg_r_set != null)
			return nffg_r_set;
		else {
			System.out.println("nffg_r_set Object is Null");
			return null;
		}
	}

	@Override
	public Set<PolicyReader> getPolicies() {
		if (policy_r_set != null)
			return policy_r_set;
		else {
			System.out.println("Policyreader set object is Null");
			return null;
		}
	}

	@Override
	public Set<PolicyReader> getPolicies(String arg0) {

		HashSet<PolicyReader> policy_r_set = new HashSet<PolicyReader>();
		for (PolicyReader policy_r : policy_r_set) {
			if (policy_r.getNffg().getName().equals(arg0)) {
				policy_r_set.add(policy_r);
			}
		}
		if (policy_r_set.isEmpty())
			return null;
		return policy_r_set;
	}

	@Override
	public Set<PolicyReader> getPolicies(Calendar arg0) {
		HashSet<PolicyReader> policy_r_set = new HashSet<PolicyReader>();
		for (PolicyReader policy_r : policy_r_set) {
			if (policy_r.getResult().getVerificationTime().after(arg0)) {
				policy_r_set.add(policy_r);
			}
		}
		if (policy_r_set.isEmpty())
			return null;
		return policy_r_set;
	}

}
