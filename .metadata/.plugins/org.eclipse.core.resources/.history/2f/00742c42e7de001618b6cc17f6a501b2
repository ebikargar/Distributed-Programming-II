<?xml version="1.0" encoding="UTF-8"?>

<project basedir="." name="sol_build">
	<description>
		Ant script for assignment3b
	</description>

	<property name="root.location" location="." />
	<!-- The location to be used for class files -->
	<property name="build.dir" location="${root.location}/build" />
	<!-- The location for source files -->
	<property name="src.dir" location="${root.location}/src" />
	<!-- The location for package pathes -->
	<property name="path.prefix" value="it/polito/dp2/NFFG" />
	<!-- The location for jar lib files -->
	<property name="lib.dir" location="${root.location}/lib" />
	<property name="web.lib.dir" location="${resources.dir}/WEB-INF/lib" />
	<!-- The location of Schema file -->
	<property name="schema.dir" location="${root.location}/xsd" />
	<!-- The location of Generated class -->
	<property name="gen.dir" location="${root.location}/generated" />

	<property name="gen-tomcat-service.dir" location="${root.location}/target" />
	<property name="resources.dir" location="${root.location}/WebContent" />
	<property name="gen-war.dir" location="${root.location}/war" />

	<!-- Java compiler settings -->
	<property name="debug" value="true" />
	<property name="debuglevel" value="source,lines,vars" />
	<property name="target" value="1.8" />
	<property name="source" value="1.8" />

	<property name="NEO4JURL" value="http://localhost:${tomcatPort}/Neo4JXML/rest" />
	<!--property name="NEO4JURL" value="http://localhost:${tomcatPort}/Neo4JXML/rest" /-->
	<property name="tomcatPort" value="8080" />
	<property name="Wadl" value="${NEO4JURL}/application.wadl" />


	<!-- The classpath that includes only the NFFG.jar -->
	<path id="classpath">
		<fileset dir="${lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<!-- initialize directories -->
	<target name="init" depends="clean">
		<mkdir dir="${build.dir}" />
	</target>

	<!-- target for cleaning -->
	<target name="clean">
		<delete dir="${build.dir}" />
		<delete dir="${gen-war.dir}" />
	</target>

	<!-- The target for compiling the build-service -->
	<target name="build-service" depends="init,generate-wadl,generate-bindings">
		<echo>Building service...</echo>
		<javac destdir="${build.dir}" srcdir="${src.dir}" debug="${debug}" debuglevel="${debuglevel}" source="${source}" target="${target}" includeantruntime="false">
			<include name="${path.prefix}/sol3/service/**/*.java" />
			<classpath>
				<path refid="classpath" />
			</classpath>
		</javac>
		<echo>Done.</echo>
	</target>

	<!-- The target for compiling the build-client??check it(source="${source}/${src.dir}??  ) -->
	<target name="build-client" depends="init,generate-wadl,generate-bindings">
		<echo>Building client...</echo>
		<javac destdir="${build.dir}" debug="${debug}" debuglevel="${debuglevel}" source="${source}" target="${target}" includeantruntime="false">
			<src path="${client1.src.dir}" />
			<src path="${client2.src.dir}" />
			<classpath>
				<path refid="sol.classpath" /> <!--"sol.classpath" or classpath? -->
			</classpath>
		</javac>
		<echo>Done.</echo>
	</target>

	<!-- The target for compiling the build-classes -->
	<target name="build-classes">
		<echo>Building of provided class...</echo>
		<javac destdir="${build.dir}" debug="${debug}" debuglevel="${debuglevel}" source="${src.dir}" target="${target}" includeantruntime="false">
			<src path="${src.dir}" />
			<classpath>
				<path refid="sol.classpath" />
			</classpath>
		</javac>
		<echo>Done.</echo>
	</target>


	<!-- define wjc task (WADL to JAVA) -->
	<taskdef name="wjc" classname="org.jvnet.ws.wadl2java.WJCTask">
		<classpath>
			<fileset dir="${lib.dir}" includes="*.jar" />
		</classpath>
	</taskdef>

	<!-- define generate-wadl generation path -->
	<target name="generate-wadl">
		<mkdir dir="${gen.dir}" />
		<echo message="Compiling the descritption..." />
		<wjc target="${src.dir}" autoSchemaPackage="false" package="it.polito.dp2.NFFG.sol3.service.neo4j" description="${WADL}" />
	</target>

	<!-- Target generate-bindings generation path  -->
	<target name="generate-bindings" unless="generate-bindings.notRequired" depends="init,-chk-bindings" description="Generate bindings from schema">
		<exec executable="xjc" failonerror="true">
			<arg value="-d" />
			<arg value="${src.dir}" />
			<arg value="-p" />
			<arg value="it.polito.dp2.NFFG.sol3.service.jaxb" />
			<arg value="${schema.dir}/nffgVerifier.xsd" />
		</exec>
		<touch file="${src.dir}/.flagfile" />
	</target>

	<!-- Target chk-bindings -->
	<target name="-chk-bindings">
		<uptodate property="generate-bindings.notRequired" targetfile="${gen.dir}/.flagfile">
			<srcfiles dir="${schema.dir}" includes="**/*.xsd" />
		</uptodate>
	</target>

</project>

