package it.polito.dp2.NFFG.sol1;

import it.polito.dp2.NFFG.*;
import it.polito.dp2.NFFG.sol1.jaxb.NffgType;
import it.polito.dp2.NFFG.sol1.jaxb.NffgVerifierType;
import it.polito.dp2.NFFG.sol1.jaxb.NodeType;
import it.polito.dp2.NFFG.sol1.jaxb.ProviderCatType;

import java.io.File;
import java.io.FileNotFoundException;
import java.math.BigInteger;
import java.net.MalformedURLException;
import java.util.*;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;

import org.xml.sax.SAXException;

public class NffgInfoSerializer {

	private NffgVerifier monitor;
	private static final String SCHEMA_FILE = "xsd" + File.separatorChar + "nffgInfo.xsd";
	private static final String SCHEMA_LOCATION = "http://www.example.org/nffgInfo nffgInfo.xsd";

	public NffgInfoSerializer() throws NffgVerifierException {
		NffgVerifierFactory factory = NffgVerifierFactory.newInstance();
		monitor = factory.newNffgVerifier();
	}

	public NffgInfoSerializer(NffgVerifier monitor) {
		super();
		this.monitor = monitor;
	}

	private JAXBElement<NffgVerifierType> build() throws MalformedArgumentException {

		NffgVerifierType NffgVerifierObj = new NffgVerifierType();
		// Read list of the nffg
		List<NffgType> nffg_List = NffgVerifierObj.getNffg();
		for (NffgReader nffg_r : monitor.getNffgs()) {
			NffgType nffg_type = new NffgType();

			nffg_type.setNffgName(nffg_r.getName());
			nffg_type.setUpTime(convertDate(nffg_r.getUpdateTime()));
			nffg_List.add(nffg_type);
			
			// Read list of the node
			List<NodeType> node_List = nffg_type.getNode();
			for (NodeReader node_r : nffg_r.getNodes()) {
				NodeType nodeType = new NodeType();
				
				//ProviderCatType provider_cat = node_r;
				
				nodeType.setNodeName(node_r.getName());
				//nodeType.set;
				
				
				
				
			
			}

		}

	
	}

	

		private static void marshal(Object rootElement, String xmlFileName, String xsdFileName, String contextPath, String schemaLocation) throws JAXBException, FileNotFoundException, MalformedURLException, SAXException {
		JAXBContext jc = JAXBContext.newInstance( contextPath );
        Marshaller m = jc.createMarshaller();
        m.setProperty( Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE );
        
        SchemaFactory sf = SchemaFactory.newInstance(javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI);
        Schema schema = sf.newSchema(new File(xsdFileName));
        m.setSchema(schema);
        
        if (schemaLocation != null)
        	m.setProperty(Marshaller.JAXB_SCHEMA_LOCATION, schemaLocation);
        
        m.marshal(rootElement, new File(xmlFileName));
	}
	
	public static void main(String[] args) throws NffgVerifierException, MalformedArgumentException, JAXBException, FileNotFoundException, SAXException, MalformedURLException {
		NffgInfoSerializer f = null;
		try {
			f = new NffgInfoSerializer();
		} catch (NffgVerifierException e) {
			System.err.println("Could not instantiate nffg monitor object");
			throw e;
		}
		
		Object nffgVerifier = null;
		try {
			nffgVerifier = f.build();
		} catch (MalformedArgumentException e) {
			System.err.println("Malformed argument exception");
			throw e;
		}
		
		try {
			NffgInfoSerializer.marshal(nffgVerifier, args[0], SCHEMA_FILE, "it.polito.dp2.NFFG.sol1.jaxb", SCHEMA_LOCATION);
		} catch (JAXBException e) {
			System.err.println("Serialization error");
			throw e;
		} catch (FileNotFoundException e) {
			System.err.println("File not found exception");
			throw e;
	    } catch (SAXException e) {
	        System.err.println("Invalid schema file, unable to validate");
	        throw e;
	    } catch (MalformedURLException e) {
	    	System.err.println("Invalid schema URL, unable to validate");
	    	throw e;
		}
	}
		
	private static XMLGregorianCalendar convertDate(Calendar calendar) {
		try {
			GregorianCalendar gregorianCalendar = new GregorianCalendar();
			gregorianCalendar.setTime(calendar.getTime());
			gregorianCalendar.setTimeZone(calendar.getTimeZone());
			return DatatypeFactory.newInstance().newXMLGregorianCalendar(gregorianCalendar);
		} catch (DatatypeConfigurationException e) {
			System.err.println("convertDate - DatatypeConfigurationException");
			e.printStackTrace();
			System.exit(1);
			return null; // compiler warning
		}
	}
}
