package it.polito.dp2.NFFG.sol1;

import it.polito.dp2.NFFG.*;
import it.polito.dp2.NFFG.sol1.jaxb.LinksType;
import it.polito.dp2.NFFG.sol1.jaxb.NffgType;
import it.polito.dp2.NFFG.sol1.jaxb.NffgVerifierType;
import it.polito.dp2.NFFG.sol1.jaxb.NodeType;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.math.BigInteger;
import java.net.MalformedURLException;
import java.util.*;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;

import org.xml.sax.SAXException;

public class NffgInfoSerializer {

	private static it.polito.dp2.NFFG.sol1.jaxb.NffgVerifierType monitorType;

	private static NffgVerifier monitor;
	private static final String SCHEMA_FILE = "xsd" + File.separatorChar + "nffgInfo.xsd";
	private static final String SCHEMA_LOCATION = "http://www.example.org/nffgInfo nffgInfo.xsd";

	public NffgInfoSerializer() throws NffgVerifierException {
		it.polito.dp2.NFFG.NffgVerifierFactory factory = it.polito.dp2.NFFG.NffgVerifierFactory.newInstance();
		monitor = factory.newNffgVerifier();
	}

	public static void main(String[] arg) throws SAXException {

		try {
			NffgInfoSerializer NffgInfoSerializerObj = new NffgInfoSerializer();
			monitorType = new it.polito.dp2.NFFG.sol1.jaxb.NffgVerifierType();

			List<it.polito.dp2.NFFG.sol1.jaxb.NffgType> nffg_List = monitorType.getNffg();
			for (NffgReader nffg_r : monitor.getNffgs()) {
				nffg_List.add(createNffg(nffg_r));

			}
			JAXBContext jct = JAXBContext.newInstance("it.polito.dp2.NFFG.sol1.jaxb");
			JAXBElement<it.polito.dp2.NFFG.sol1.jaxb.NffgVerifierType> mElement = (new it.polito.dp2.NFFG.sol1.jaxb.ObjectFactory())
					.createNffgVerifier(monitorType);
			Marshaller m = jct.createMarshaller();
			m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
			m.marshal(mElement, new FileOutputStream(arg[0]));
			m.marshal(mElement, new PrintStream(System.out));

		} catch (JAXBException e) {
			System.out.println("JAXBException: " + e.getMessage());
			e.printStackTrace();
			System.exit(1);
		} catch (NffgVerifierException e) {
			System.out.println("NffgVerifierException: " + e.getMessage());
			e.printStackTrace();
			System.exit(1);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private static NffgType createNffg(NffgReader nffg_r) {
		// TODO Auto-generated method stub
		it.polito.dp2.NFFG.sol1.jaxb.NffgType nffgType = new it.polito.dp2.NFFG.sol1.jaxb.NffgType();

		List<it.polito.dp2.NFFG.sol1.jaxb.NodeType> node_list = nffgType.getNode();

		nffgType.setNffgName(nffg_r.getName());
		nffgType.setUpTime(convertDate(nffg_r.getUpdateTime()));

		for (NodeReader node : nffg_r.getNodes()) {
			node_list.add(createNode(node));
		}
		
		List<it.polito.dp2.NFFG.sol1.jaxb.LinksType> link_list = nffgType.getLinks();
		for (LinkReader link : nffg_r.) {
			link_list.add(createNode(link));
		}

		return nffgType;
	}

	
	private static NodeType createNode(NodeReader node) {

		return null;
	}
	
	private static LinksType createNode(LinkReader link) {
		// TODO Auto-generated method stub
		return null;
	}
	
	
	
	
	

	List<NodeType> node_List = nffg_type.getNode();for(
	NodeReader node_r:nffg_r.getNodes())
	{
				NodeType nodeType = new NodeType();

//				// ProviderCatType provider_cat = node_r;
//
//				nodeType.setNodeName(node_r.getName());
//				// nodeType.set;

	private static XMLGregorianCalendar convertDate(Calendar calendar) {
					try {
						GregorianCalendar gregorianCalendar = new GregorianCalendar();
						gregorianCalendar.setTime(calendar.getTime());
						gregorianCalendar.setTimeZone(calendar.getTimeZone());
						return DatatypeFactory.newInstance().newXMLGregorianCalendar(gregorianCalendar);
					} catch (DatatypeConfigurationException e) {
						System.err.println("convertDate - DatatypeConfigurationException");
						e.printStackTrace();
						System.exit(1);
						return null; // compiler warning
					}		
				
			
			
			
			
			
			List<LinksType> link_List = nffg_type.getLinks();
			for (LinkReader link_r : link_r) {		
		
        //flightSystemObj.setAircrafts(buildAircrafts());
		
		//flightSystemObj.setFlights(buildFlights());

//		NffgVerifierType NffgVerifierObj = new NffgVerifierType();
//		// Read list of the nffg
//		List<NffgType> nffg_List = NffgVerifierObj.getNffg();
//		for (NffgReader nffg_r : monitor.getNffgs()) {
//			NffgType nffg_type = new NffgType();
//
//			nffg_type.setNffgName(nffg_r.getName());
//			nffg_type.setUpTime(convertDate(nffg_r.getUpdateTime()));
//			nffg_List.add(nffg_type);
//
//			// Read list of the node
//			List<NodeType> node_List = nffg_type.getNode();
//			for (NodeReader node_r : nffg_r.getNodes()) {
//				NodeType nodeType = new NodeType();
//
//				// ProviderCatType provider_cat = node_r;
//
//				nodeType.setNodeName(node_r.getName());
//				// nodeType.set;
//			}
//
//		}
		return null;
	}

	private Object buildNffg() {
		// TODO Auto-generated method stub
		return null;
	}

}
