package it.polito.dp2.NFFG.sol2;

import javax.ws.rs.ProcessingException;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.Entity;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.Response;
import java.net.URI;


import it.polito.dp2.NFFG.NffgReader;
import it.polito.dp2.NFFG.NffgVerifier;
import it.polito.dp2.NFFG.lab2.NoGraphException;
import it.polito.dp2.NFFG.lab2.ReachabilityTester;
import it.polito.dp2.NFFG.lab2.ServiceException;
import it.polito.dp2.NFFG.lab2.UnknownNameException;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.UriBuilder;

public class MyReachabilityTester implements ReachabilityTester {

	private String url;
	private NffgVerifier monitor;
	String nffgName;
	
	public MyReachabilityTester(String url_address, NffgVerifier monitor) {
		
	this.url = url_address;
	this.monitor= monitor;
	
	}

	@Override
	public void loadNFFG(String name) throws UnknownNameException, ServiceException {
		
		NffgReader nffg_r = monitor.getNffg(name);
		nffgName = nffg_r.getName();
		
		WebTarget target;
		try{
			// create client object
			Client client = ClientBuilder.newClient();
			
			// make the web targets
			target = client.target(getBaseURI());
			System.out.println ("Client is Ready to invoke remote operations");	    

			ObjectFactory objFact = new ObjectFactory();
			Node xmlGetNode = objFact.createNode();
			
			//which property do we need to set to node here/then we should post/or put the node?
			xmlGetNode.setId("name");
			xmlGetNode.setLabels("value");
			performpost(xmlGetNode);
			
			//what we should get
			xmlGetNode.getProperty();
					
					
					target.request().accept(MediaType.APPLICATION_XML).get(Node.class);
			//extarct data from java object
			System.out.println (" --------- First request completed --------- ");
			System.out.println ("Result of resolution of ");
			printNode(xmlGetNode);
			
		Response res = client.target("http://example.org/hello")
		.queryParam("MyParam","...")
		.request("text/plain")
		.header("MyHeader", "...")
		.get(); //text plain response
		
		}catch(ProcessingException pe ){
			System.out.println("Error during JAX-RS request processing");
			pe.printStackTrace();
		} catch(WebApplicationException wae ){
			System.out.println("Server returned error");
			wae.printStackTrace();
		} catch(Exception e) {
			System.out.println("Unexpected exception");
			e.printStackTrace();
		}
	}
		private void performpost(Node xmlGetNode) {
				System.out.println();
			    System.out.println("--- Performing a Post node --- \n");
		    	System.out.println(" min " + xmlGetNode.getId());
		    	System.out.println(" max " + xmlGetNode.getLabels());
		    	
		    	 Node response = target.path("localhost:8080/Neo4JXML/rest/resource/node/")
		                   .request(MediaType.APPLICATION_XML)
		                   .post(Entity.entity(xmlGetNode,MediaType.APPLICATION_XML),Node.class);
	}

		private static URI getBaseURI() {
		    return UriBuilder.fromUri("localhost:8080/Neo4JXML/rest/").build();
		}
		
		
		//upload on neo4j ,the nodes and the links
		//1.
		//first: append the resource
		// append then nodes 
		//do DELETE localhost:8080/Neo4JXML/rest/resource/nodes,based  ;
		
		//second,for each node,create the node element and set property
		//post on current endl point : localhost:8080/Neo4JXML/rest/resource/node
		
		
		
		//do the same 3 step of work for loading the links
		// you need store Id of the node from prveious step to be used here
		
		//3. store the name of nffg -->done


	private void printNode(Node xmlGetNode) {
		
		if(xmlGetNode !=null)
			System.out.println("Node name is: " + xmlGetNode.getId());
			System.out.println("Node name is: " + xmlGetNode.getProperty());
	}

	@Override
	public boolean testReachability(String srcName, String destName)
			throws UnknownNameException, ServiceException, NoGraphException {
		// call GET localhost:8080/Neo4JXML/rest/resource/node/0/paths?dst=2 (0=srcId,2=destId from previous step)
		// check the number of path from src to dest, if it's >0 we return: true  if there is no return false

		return false;
	}

	@Override
	public String getCurrentGraphName() {
		return nffgName;
	}

}
