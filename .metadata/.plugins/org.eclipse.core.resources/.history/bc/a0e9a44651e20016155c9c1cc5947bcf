package it.polito.dp2.NFFG.sol3.client1;

import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Set;

import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.Entity;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import it.polito.dp2.NFFG.LinkReader;
import it.polito.dp2.NFFG.NffgReader;
import it.polito.dp2.NFFG.NffgVerifier;
import it.polito.dp2.NFFG.NodeReader;
import it.polito.dp2.NFFG.lab3.AlreadyLoadedException;
import it.polito.dp2.NFFG.lab3.NFFGClient;
import it.polito.dp2.NFFG.lab3.ServiceException;
import it.polito.dp2.NFFG.lab3.UnknownNameException;
import it.polito.dp2.NFFG.sol3.service.jaxb.FuncType;
import it.polito.dp2.NFFG.sol3.service.jaxb.ProviderCatType;
import it.polito.dp2.NFFG.sol3.service.jaxb.LinkType;
import it.polito.dp2.NFFG.sol3.service.jaxb.LinksType;
import it.polito.dp2.NFFG.sol3.service.jaxb.Nffg;
import it.polito.dp2.NFFG.sol3.service.jaxb.NodeType;
import it.polito.dp2.NFFG.sol3.service.jaxb.NodesType;
import it.polito.dp2.NFFG.sol3.service.jaxb.ObjectFactory;

public class MyNFFGClient implements NFFGClient {

	private NffgVerifier nffgVerifier;
	private WebTarget target;
	private ObjectFactory objFact;

	public MyNFFGClient(String url_address, NffgVerifier monitor) {
		this.nffgVerifier = monitor;
		this.target = ClientBuilder.newClient().target(url_address);
		this.objFact = new ObjectFactory();

	}

	@Override
	public void loadNFFG(String name) throws UnknownNameException, AlreadyLoadedException, ServiceException {

		NffgReader nffg_r = nffgVerifier.getNffg(name);
		if (nffg_r == null)
			throw new UnknownNameException();
		loadnffgreader(nffg_r);
	}

	private void loadnffgreader(NffgReader nffg_r) throws ServiceException {
		// Delete response each time

		Nffg nffgItem = objFact.createNffg();
		nffgItem.setNffgName(nffg_r.getName());
		nffgItem.setUpTime(convertDate(nffg_r.getUpdateTime()));

		Set<NodeReader> read_node_list = nffg_r.getNodes();
		NodesType tmpNodes_list = objFact.createNodesType();
		LinksType tmpLinks_list = objFact.createLinksType();

		for (NodeReader node_r : read_node_list) {
			NodeType nodeItem = objFact.createNodeType();
			nodeItem = createNode(node_r);
			tmpNodes_list.getNode().add(nodeItem);

			Set<LinkReader> read_link_list = node_r.getLinks();
			for (LinkReader link_r : read_link_list) {
				LinkType linkItem = objFact.createLinkType();
				linkItem = createLinks(link_r);
				tmpLinks_list.getLink().add(linkItem);
			}
		}

		nffgItem.setNodes(tmpNodes_list);
		nffgItem.setLinks(tmpLinks_list);

		Response delRes = target.path("nffgService").request(MediaType.APPLICATION_XML)
				.post(Entity.entity(nffgItem, MediaType.APPLICATION_XML));
		if (delRes.getStatus() != 200) {
			System.out.println("Error in deleting response...");
			throw new ServiceException();
		}

	}

	private NodeType createNode(NodeReader node_r) {

		NodeType nodeTmp = objFact.createNodeType();
		nodeTmp.setNodeName(node_r.getName());

		// Create providerCat element
		ProviderCatType providerCat = objFact.createProviderCatType();
		it.polito.dp2.NFFG.sol3.service.jaxb.FuncType funcTypeStatus;
		switch (node_r.getFuncType()) {
		case FW:
			funcTypeStatus = it.polito.dp2.NFFG.sol3.service.jaxb.FuncType.FW;
			break;
		case DPI:
			funcTypeStatus = it.polito.dp2.NFFG.sol3.service.jaxb.FuncType.DPI;
			break;
		case NAT:
			funcTypeStatus = it.polito.dp2.NFFG.sol3.service.jaxb.FuncType.NAT;
			break;
		case SPAM:
			funcTypeStatus = it.polito.dp2.NFFG.sol3.service.jaxb.FuncType.SPAM;
			break;
		case CACHE:
			funcTypeStatus = it.polito.dp2.NFFG.sol3.service.jaxb.FuncType.CACHE;
			break;
		case VPN:
			funcTypeStatus = it.polito.dp2.NFFG.sol3.service.jaxb.FuncType.VPN;
			break;
		case WEB_SERVER:
			funcTypeStatus = it.polito.dp2.NFFG.sol3.service.jaxb.FuncType.WEB_SERVER;
			break;
		case WEB_CLIENT:
			funcTypeStatus = it.polito.dp2.NFFG.sol3.service.jaxb.FuncType.WEB_CLIENT;
			break;
		case MAIL_SERVER:
			funcTypeStatus = it.polito.dp2.NFFG.sol3.service.jaxb.FuncType.MAIL_SERVER;
			break;
		case MAIL_CLIENT:
			funcTypeStatus = it.polito.dp2.NFFG.sol3.service.jaxb.FuncType.MAIL_CLIENT;
			break;

		default:
			funcTypeStatus = it.polito.dp2.NFFG.sol3.service.jaxb.FuncType.FW;
		}

		providerCat.setFuncType((FuncType.fromValue(funcTypeStatus.value())));
		nodeTmp.setProviderCat(providerCat);

		return nodeTmp;
	}

	private LinkType createLinks(LinkReader link_r) {
		LinkType linkTmp = objFact.createLinkType();

		linkTmp.setLinkName(link_r.getName());
		linkTmp.setSrcNode(link_r.getSourceNode().getName());
		linkTmp.setDestNode(link_r.getDestinationNode().getName());
		return linkTmp;
	}


	@Override
	public void loadAll() throws AlreadyLoadedException, ServiceException {
		for (NffgReader nffg_r : nffgVerifier.getNffgs()){
			
			loadnffgreader(nffg_r);
			
		}
		
		
		
		
	}

	@Override
	public void loadReachabilityPolicy(String name, String nffgName, boolean isPositive, String srcNodeName,
			String dstNodeName) throws UnknownNameException, ServiceException {
		// TODO Auto-generated method stub

	}

	@Override
	public void unloadReachabilityPolicy(String name) throws UnknownNameException, ServiceException {
		// TODO Auto-generated method stub

	}

	@Override
	public boolean testReachabilityPolicy(String name) throws UnknownNameException, ServiceException {
		// TODO Auto-generated method stub
		return false;
	}

	private static XMLGregorianCalendar convertDate(Calendar calendar) {
		try {
			GregorianCalendar gregorianCalendar = new GregorianCalendar();
			gregorianCalendar.setTime(calendar.getTime());
			gregorianCalendar.setTimeZone(calendar.getTimeZone());
			return DatatypeFactory.newInstance().newXMLGregorianCalendar(gregorianCalendar);
		} catch (DatatypeConfigurationException e) {
			System.err.println("convertDate - DatatypeConfigurationException");
			e.printStackTrace();
			System.exit(1);
			return null;
		}
	}

}
