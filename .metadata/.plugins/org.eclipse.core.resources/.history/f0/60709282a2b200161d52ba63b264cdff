package it.polito.dp2.NFFG.sol1;

import it.polito.dp2.NFFG.*;
import it.polito.dp2.NFFG.sol1.jaxb.FuncType;
import it.polito.dp2.NFFG.sol1.jaxb.LinkType;
import it.polito.dp2.NFFG.sol1.jaxb.LinksType;
import it.polito.dp2.NFFG.sol1.jaxb.NffgType;
import it.polito.dp2.NFFG.sol1.jaxb.NffgVerifierType;
import it.polito.dp2.NFFG.sol1.jaxb.NodeType;
import it.polito.dp2.NFFG.sol1.jaxb.NodesType;
import it.polito.dp2.NFFG.sol1.jaxb.ObjectFactory;
import it.polito.dp2.NFFG.sol1.jaxb.PolicyType;
import it.polito.dp2.NFFG.sol1.jaxb.ProviderCatType;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.util.*;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;

import org.xml.sax.SAXException;

public class NffgInfoSerializer {

	private NffgVerifier monitor;
	public static final String SCHEMA_FILE = "xsd" + File.separatorChar + "nffgInfo.xsd";
	public static final String SCHEMA_LOCATION = "http://www.example.org/nffgInfo nffgInfo.xsd";

	NffgVerifierType nffgVerifier = new ObjectFactory().createNffgVerifierType();

	/**
	 * Default constructor
	 * 
	 * @throws NffgVerifierException
	 */
	public NffgInfoSerializer() throws NffgVerifierException {
		it.polito.dp2.NFFG.NffgVerifierFactory factory = it.polito.dp2.NFFG.NffgVerifierFactory.newInstance();
		monitor = factory.newNffgVerifier();
	}

	public NffgInfoSerializer(NffgVerifier monitor) {
		super();
		this.monitor = monitor;
	}

	/*
	 * Marhaling: Validation based on Xml Schema Generateing output as xml file
	 */
	public void marshal(PrintStream filename) {
		try {
			JAXBContext JAXBC = JAXBContext.newInstance("it.polito.dp2.NFFG.sol1.jaxb");
			JAXBElement<it.polito.dp2.NFFG.sol1.jaxb.NffgVerifierType> rootElement = new it.polito.dp2.NFFG.sol1.jaxb.ObjectFactory()
					.createNffgVerifier(nffgVerifier);

			Marshaller m = JAXBC.createMarshaller();

			SchemaFactory schemaf = SchemaFactory.newInstance(javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI);
			m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
			m.setSchema(schemaf.newSchema(new File(SCHEMA_FILE)));
			m.setProperty(Marshaller.JAXB_SCHEMA_LOCATION, SCHEMA_LOCATION);
			m.marshal(rootElement, filename);
			m.marshal(rootElement, System.out);
		} catch (JAXBException e) {
			System.out.println("JAXBException: " + e.getMessage());
			e.printStackTrace();
			System.exit(1);
		} catch (SAXException e) {
			System.out.println("SAXException: " + e.getMessage());
			e.printStackTrace();
			System.exit(1);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] arg) throws NffgVerifierException {
		try {
			NffgInfoSerializer nffgInfo = new NffgInfoSerializer();
			
			// Element Nffg implementation method 
			nffgInfo.createNffgs();
			
			//generated output xml file
			PrintStream output_file = new PrintStream(new File(arg[0]));
			nffgInfo.marshal(output_file);
		} catch (NffgVerifierException e) {
			System.err.println("NffgVerifierException has occured");
			e.printStackTrace();
		} catch (FileNotFoundException e) {
			System.err.println("FileNotFoundException! file: " + arg[0] + " is not existed!");
			e.printStackTrace();
		}
	}
	// List<it.polito.dp2.NFFG.sol1.jaxb.NffgType> nffg_List =
	// monitorType.getNffg();
	// for (NffgReader nffg_r : monitor.getNffgs()) {
	// nffg_List.add(createNffg(nffg_r));
	// }
	//
	// // Reading list of Policies
	// Set<PolicyReader> Policyset = monitor.getPolicies( )NFFG.getName());
	// for (PolicyReader policy_r : monitor.getPolicies()) {
	//
	// String nffg_name = policy_r.getNffg().getName();
	// for (it.polito.dp2.NFFG.sol1.jaxb.NffgType nffgType : nffg_List)
	// if (nffgType.getNffgName().equals(nffg_name))
	// nffgType.getPolicies().add(createPolicy(policy)); //
	// getPolicy().add(createPolicy(policy));
	// }

	// Reading list of Nffgs
	// List<it.polito.dp2.NFFG.sol1.jaxb.NffgType> nffg_List =
	// monitorType.getNffg();
	// for (NffgReader nffg_r : monitor.getNffgs()) {
	// nffg_List.add(createNffg(nffg_r));
	// }
	//
	// // Reading list of Policies
	// Set<PolicyReader> Policyset = monitor.getPolicies( )NFFG.getName());
	// for (PolicyReader policy_r : monitor.getPolicies()) {
	//
	// String nffg_name = policy_r.getNffg().getName();
	// for (it.polito.dp2.NFFG.sol1.jaxb.NffgType nffgType : nffg_List)
	// if (nffgType.getNffgName().equals(nffg_name))
	// nffgType.getPolicies().add(createPolicy(policy)); //
	// getPolicy().add(createPolicy(policy));
	// }
	// }

	private void createNffgs() {
		
		//get list of Nffg element from monitor
		Set<NffgReader> nffg_set = monitor.getNffgs();
		
		for (NffgReader nffg_r: nffg_set) {
			it.polito.dp2.NFFG.sol1.jaxb.NffgType nffgType = new it.polito.dp2.NFFG.sol1.jaxb.NffgType();
			nffgType.setNffgName(nffg_r.getName());
			nffgType.setUpTime(convertDate(nffg_r.getUpdateTime()));
			
			nffgVerifier.getNffg().add(nffgType);
			
			// Element node implementation method 
			Set<NodeReader> node_set = nffg_r.getNodes();
			NodesType Nodes = new ObjectFactory().createNodesType();
			
			LinksType Links = new ObjectFactory().createLinksType();

			nffgType.setNodes(Nodes);
			// Add Links to the NFFG
			nffgType.setLinks(Links);
			
			it.polito.dp2.NFFG.sol1.jaxb.LinksType link_list = new it.polito.dp2.NFFG.sol1.jaxb.LinksType();
			for (NodeReader node_r : nffg_r.getNodes()) {
				node_list.add(createNode(node_r));

				for (LinkReader link : node_r.getLinks()) {
					link_list.add(createLinks(link));
				}
			}

		}
			
			
			
		}
		

	}

	// create Nffg Element
	private static NffgType createNffg(NffgReader nffg_r) {

		it.polito.dp2.NFFG.sol1.jaxb.NffgType nffgType = new it.polito.dp2.NFFG.sol1.jaxb.NffgType();
		nffgType.setNffgName(nffg_r.getName());
		nffgType.setUpTime(convertDate(nffg_r.getUpdateTime()));

		List<it.polito.dp2.NFFG.sol1.jaxb.NodeType> node_list = nffgType.getNodes().getNode();
		List<it.polito.dp2.NFFG.sol1.jaxb.LinkType> link_list = nffgType.getLinks().getLink();
		for (NodeReader node_r : nffg_r.getNodes()) {
			node_list.add(createNode(node_r));

			for (LinkReader link : node_r.getLinks()) {
				link_list.add(createLinks(link));
			}
		}

		return nffgType;
	}

	// Create node element
	private static NodeType createNode(NodeReader node_r) {

		it.polito.dp2.NFFG.sol1.jaxb.NodeType nodeType = new it.polito.dp2.NFFG.sol1.jaxb.NodeType();
		nodeType.setNodeName(node_r.getName());

		// Create providerCat element
		it.polito.dp2.NFFG.sol1.jaxb.ProviderCatType providerCat = new it.polito.dp2.NFFG.sol1.jaxb.ProviderCatType();
		it.polito.dp2.NFFG.sol1.jaxb.FuncType funcTypeStatus;
		switch (node_r.getFuncType()) {
		case FW:
			funcTypeStatus = it.polito.dp2.NFFG.sol1.jaxb.FuncType.FW;
			break;
		case DPI:
			funcTypeStatus = it.polito.dp2.NFFG.sol1.jaxb.FuncType.DPI;
			break;
		case NAT:
			funcTypeStatus = it.polito.dp2.NFFG.sol1.jaxb.FuncType.NAT;
			break;
		case SPAM:
			funcTypeStatus = it.polito.dp2.NFFG.sol1.jaxb.FuncType.SPAM;
			break;
		case CACHE:
			funcTypeStatus = it.polito.dp2.NFFG.sol1.jaxb.FuncType.CACHE;
			break;
		case VPN:
			funcTypeStatus = it.polito.dp2.NFFG.sol1.jaxb.FuncType.VPN;
			break;
		case WEB_SERVER:
			funcTypeStatus = it.polito.dp2.NFFG.sol1.jaxb.FuncType.WEB_SERVER;
			break;
		case WEB_CLIENT:
			funcTypeStatus = it.polito.dp2.NFFG.sol1.jaxb.FuncType.WEB_CLIENT;
			break;
		case MAIL_SERVER:
			funcTypeStatus = it.polito.dp2.NFFG.sol1.jaxb.FuncType.MAIL_SERVER;
			break;
		case MAIL_CLIENT:
			funcTypeStatus = it.polito.dp2.NFFG.sol1.jaxb.FuncType.MAIL_CLIENT;
			break;

		default:
			funcTypeStatus = it.polito.dp2.NFFG.sol1.jaxb.FuncType.FW;
		}

		providerCat.setFuncType(funcTypeStatus);
		nodeType.setProviderCat(providerCat);

		return nodeType;
	}

	// Create links element
	private static LinkType createLinks(LinkReader link_r) {
		it.polito.dp2.NFFG.sol1.jaxb.LinkType linkType = new it.polito.dp2.NFFG.sol1.jaxb.LinkType();

		linkType.setLinkName(link_r.getName());
		linkType.setSrcNode(link_r.getSourceNode().getName());
		linkType.setDestNode(link_r.getDestinationNode().getName());

		return linkType;
	}

	// Create policy element
	private static PolicyType createPolicy(PolicyReader policy_r) {
		it.polito.dp2.NFFG.sol1.jaxb.PolicyType policyType = new it.polito.dp2.NFFG.sol1.jaxb.PolicyType();

		policyType.setPolicyName(policy_r.getName());
		policyType.setNffgName(policy_r.getNffg().getName());
		policyType.setIsPositive(policy_r.isPositive());

		// policy is instance of ReachabilityPolicyReader
		String source = ((ReachabilityPolicyReader) policy_r).getSourceNode().getName();
		policyType.setSrcNode(source);

		String destination = ((ReachabilityPolicyReader) policy_r).getSourceNode().getName();
		policyType.setDestNode(destination);

		// policy is instance of TraversalPolicyReader
		if (policy_r instanceof TraversalPolicyReader) {

			Set<FunctionalType> set = ((TraversalPolicyReader) policy_r).getTraversedFuctionalTypes();
			for (FunctionalType fType : set) {
				ProviderCatType provider_r = new ProviderCatType();
				provider_r.setFuncType(FuncType.fromValue(fType.value()));
				policyType.getTraversComponent().add(provider_r);

			}
		}

		it.polito.dp2.NFFG.sol1.jaxb.ResultType result_r = new it.polito.dp2.NFFG.sol1.jaxb.ResultType();
		if (policy_r.getResult() != null) {
			result_r.setMessage(policy_r.getResult().getVerificationResultMsg());
			result_r.setVerificationTime(convertDate(policy_r.getResult().getVerificationTime()));
			result_r.setVerificationResult(policy_r.getResult().getVerificationResult());
			policyType.setVerificationResult(result_r);
		}
		return policyType;
	}

	private static XMLGregorianCalendar convertDate(Calendar calendar) {
		try {
			GregorianCalendar gregorianCalendar = new GregorianCalendar();
			gregorianCalendar.setTime(calendar.getTime());
			gregorianCalendar.setTimeZone(calendar.getTimeZone());
			return DatatypeFactory.newInstance().newXMLGregorianCalendar(gregorianCalendar);
		} catch (DatatypeConfigurationException e) {
			System.err.println("convertDate - DatatypeConfigurationException");
			e.printStackTrace();
			System.exit(1);
			return null; // compiler warning
		}
	}
}// end of Serializer