package it.polito.dp2.NFFG.sol1;

import it.polito.dp2.NFFG.*;
import it.polito.dp2.NFFG.sol1.jaxb.NffgType;
import it.polito.dp2.NFFG.sol1.jaxb.NffgVerifierType;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.text.SimpleDateFormat;

import javax.xml.bind.JAXBElement;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.parsers.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Set;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

public class NffgInfoSerializer {

	private NffgVerifier monitor;
	private Document doc;

	private static final String SCHEMA_FILE = "xsd" + File.separatorChar + "nffgInfo.xsd";
	private static final String SCHEMA_LOCATION = "http://www.example.org/nffgInfo nffgInfo.xsd";

	// do we need to make any change/modify on ant file or no it's ready
	/**
	 * Default constructror
	 * 
	 * @throws NffgVerifierException
	 */
	public NffgInfoSerializer() throws NffgVerifierException {
		NffgVerifierFactory factory = NffgVerifierFactory.newInstance();
		monitor = factory.newNffgVerifier();
	}

	public NffgInfoSerializer(NffgVerifier monitor) {
		super();
		this.monitor = monitor;
	}

	private JAXBElement<NffgVerifierType> build() throws MalformedArgumentException {
		// DocumentBuilderFactory factory =
		// DocumentBuilderFactory.newInstance();
		// DocumentBuilder builder = factory.newDocumentBuilder();
		// doc = builder.newDocument();

		NffgVerifierType NffgVerifierObj = new NffgVerifierType();

		List<NffgType> nffgList = NffgVerifierObj.getNffg();
		for (NffgReader nffg : monitor.getNffgs()) {
			NffgType nffgType = new NffgType();

			nffgType.setNffgName(nffg.getName());
			nffgType.setUpTime(convertDate(nffg.getUpdateTime()));

			nffgList.add(nffgType);
		}

		// create the root element
		Element rootTag = (Element) doc.createElement("nffgVerifier");
		doc.appendChild(rootTag);

		rootTag.appendChild(buildNffgs());

		rootTag.appendChild(buildPolicies());

	}

	private Element buildPolicies() { // should be Node|element??
		// TODO Auto-generated method stub
		Element policySetTag = (Element) doc.createElement("policySet");
		Set<PolicyReader> set = monitor.getPolicies();
		// DO WE NEED TO CHECK IS POLICY IS NULL OR NO
		for (PolicyReader pr : set) {
			Element policyTag = (Element) doc.createElement("policy");
			policySetTag.appendChild(policyTag);

			policyTag.setAttribute("policyName", pr.getName());
			// policyTag.setIDAttribute("policyType", pr.isPositive());
			policyTag.setAttribute("nffgName", pr.getNffg().getName());
			policyTag.setIdAttribute("verificationResult", pr.isPositive());

			// policyTag.setAttribute("srcNode", pr.getName(srcNode));
			// policyTag.setAttribute("srcNode", pr.getName()); destNode

		}
		return policySetTag;// return policyTag or policySetTag
	}

	private Element buildNffgs() { // should be Node|element??
		// TODO Auto-generated method stub
		Element nffgSetTag = (Element) doc.createElement("nffgSet");
		Set<NffgReader> set = monitor.getNffgs();
		// DO WE NEED TO DEFINE NODELIST OR NO?
		for (NffgReader nffg_r : set) {
			Element nffgTag = (Element) doc.createElement("nffg");
			nffgSetTag.appendChild(nffgTag);

			// GregorianCalendar updateTime = nffg_r.getUpdateTime();
			Calendar updateTime = nffg_r.getUpdateTime();
			nffgTag.setAttribute("upTime", formatDate(updateTime));
			nffgTag.setAttribute("nffgName", nffg_r.getName());

			// get the nodes
			Set<NodeReader> nodeSet = nffg_r.getNodes();
			Element nodeSetTag = (Element) doc.createElement("nodeSet");

			for (NodeReader nr : nodeSet) {
				Element nodeTag = (Element) doc.createElement("node");
				nodeSetTag.appendChild(nodeTag);

				nodeTag.setAttribute("nodeName", nr.getName());
				nodeTag.setAttribute("funcType", nr.getFuncType().toString());
				// nodeTag.setAttribute("linkSize", nr.getLinks().to);

				Set<LinkReader> linkSet = nr.getLinks();
				Element linkSetTag = (Element) doc.createElement("linkSet");
				nodeTag.appendChild(linkSetTag);

				for (LinkReader lr : linkSet) {
					Element linkTag = (Element) doc.createElement("link");
					linkSetTag.appendChild(linkTag);

					linkTag.setAttribute("srcNode", lr.getSourceNode().getName());
					linkTag.setAttribute("destNode", lr.getDestinationNode().getName());
				}

			}

		}
		return nffgSetTag; // is it correct?
	}

	public static void main(String[] args)
			throws NffgVerifierException, ParserConfigurationException, TransformerException, FileNotFoundException {
		NffgInfoSerializer f = null;

		try {
			f = new NffgInfoSerializer();
		} catch (NffgVerifierException e) {
			System.err.println("Could not instantiate nffg monitor object");
			throw e;
		}

		try {
			f.build();
		} catch (ParserConfigurationException e) {
			System.err.println("Could not locate a JAXP DocumentBuilder class");
			throw e;
		}

		try {
			f.serialize(args[0]);
		} catch (TransformerException e) {
			System.err.println("Serialization error");
			throw e;
		} catch (FileNotFoundException e) {
			System.err.println("File not found exception");
			throw e;
		}
	}

	private static XMLGregorianCalendar convertDate(Calendar calendar) {
		try {
			GregorianCalendar gregorianCalendar = new GregorianCalendar();
			gregorianCalendar.setTime(calendar.getTime());
			gregorianCalendar.setTimeZone(calendar.getTimeZone());
			return DatatypeFactory.newInstance().newXMLGregorianCalendar(gregorianCalendar);
		} catch (DatatypeConfigurationException e) {
			System.err.println("convertDate - DatatypeConfigurationException");
			e.printStackTrace();
			System.exit(1);
			return null; // compiler warning
		}
	}

	private void serialize(String filename) throws TransformerException, FileNotFoundException {
		TransformerFactory xformFactory = TransformerFactory.newInstance();
		Transformer idTransform;
		idTransform = xformFactory.newTransformer();
		idTransform.setOutputProperty(OutputKeys.INDENT, "yes");
		idTransform.setOutputProperty(OutputKeys.DOCTYPE_SYSTEM, "nffgInfo.dtd");
		Source input = new DOMSource(doc);
		Result output = new StreamResult(new FileOutputStream(filename));
		idTransform.transform(input, output);
	}

}
